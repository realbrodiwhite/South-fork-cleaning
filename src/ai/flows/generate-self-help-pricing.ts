// This file is generated by Firebase Genkit.
'use server';
/**
 * @fileOverview A self-help portal that generates accurate pricing and quotes for cleaning services based on detailed property information.
 *
 * - generateSelfHelpPricing - A function that generates accurate pricing for cleaning services.
 * - GenerateSelfHelpPricingInput - The input type for the generateSelfHelpPricing function.
 * - GenerateSelfHelpPricingOutput - The return type for the generateSelfHelpPricing function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateSelfHelpPricingInputSchema = z.object({
  propertyType: z.string().describe('The type of property (e.g., house, apartment, condo).'),
  propertySize: z.string().describe('The size of the property in square feet.'),
  bedroomCount: z.number().describe('The number of bedrooms in the property.'),
  bathroomCount: z.number().describe('The number of bathrooms in the property.'),
  commonAreas: z.string().describe('Description of the common areas in the property.'),
  usageFrequency: z.string().describe('How often the property is used (e.g., daily, weekly, monthly).'),
  cleaningServices: z.array(z.string()).describe('The list of selected cleaning services.'),
  resupplyItems: z.array(z.string()).describe('The list of selected resupply items.'),
  addOns: z.array(z.string()).describe('The list of selected add-on services.'),
});
export type GenerateSelfHelpPricingInput = z.infer<typeof GenerateSelfHelpPricingInputSchema>;

const GenerateSelfHelpPricingOutputSchema = z.object({
  estimatedPrice: z.number().describe('The estimated price for the selected cleaning services and resupply items.'),
  priceBreakdown: z.string().describe('A detailed breakdown of the price calculation.'),
  recommendations: z.string().describe('Tailored cleaning and resupply recommendations based on the property information.'),
});
export type GenerateSelfHelpPricingOutput = z.infer<typeof GenerateSelfHelpPricingOutputSchema>;

export async function generateSelfHelpPricing(input: GenerateSelfHelpPricingInput): Promise<GenerateSelfHelpPricingOutput> {
  return generateSelfHelpPricingFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateSelfHelpPricingPrompt',
  input: {schema: GenerateSelfHelpPricingInputSchema},
  output: {schema: GenerateSelfHelpPricingOutputSchema},
  prompt: `You are an expert cleaning and resupply service pricing tool. Based on the property details and selected services, provide an accurate price estimate, a detailed breakdown of the price, and tailored recommendations.

Property Type: {{{propertyType}}}
Property Size: {{{propertySize}}} sq ft
Number of Bedrooms: {{{bedroomCount}}}
Number of Bathrooms: {{{bathroomCount}}}
Common Areas: {{{commonAreas}}}
Usage Frequency: {{{usageFrequency}}}
Cleaning Services: {{#each cleaningServices}}{{{this}}}, {{/each}}
Resupply Items: {{#each resupplyItems}}{{{this}}}, {{/each}}
Add-ons: {{#each addOns}}{{{this}}}, {{/each}}

Consider the different use cases for each area (kitchen, bedroom, bathroom, common areas) when generating the price and recommendations.`,
});

const generateSelfHelpPricingFlow = ai.defineFlow(
  {
    name: 'generateSelfHelpPricingFlow',
    inputSchema: GenerateSelfHelpPricingInputSchema,
    outputSchema: GenerateSelfHelpPricingOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
